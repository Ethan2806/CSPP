{
  
    
        "post0": {
            "title": "Java script",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# JavaScript Tutorial n”, “&gt; Quick launch into Variables, Functions, Arrays, JavaScript HTML, using Jupyter Notebooks n”, “ n”, “- toc: true n”, “- comments: true n”, “- permalink: /techtalk/javascript n”, “- categories: [jupyter, week5] n”, “- type: pbl” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### console.log output n”, “Output to console using the classic programming introduction using a &quot;Hello, World!&quot; message. n”, “- The command or function is console.log() n”, “- &quot;Hello, World&quot; is a String literal. This is the referred to as Static text, as it does not change. n”, “- &quot;Hello, World&quot; is a parameter to the console.log command. n”, “- The console.log command outputs the parameter to the console, so you can see it in this Jupyter document. n”, “- Note, in a Web Application, console.log is used for debugging and is not visible from the browser via HTML. It is used behind the scenes, when using Inspect-&gt;Console from the browser.” ] }, { “cell_type”: “code”, “execution_count”: 22, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello, Emma! n” ] } ], “source”: [ “console.log(&quot;Hello, Emma!&quot;) n”, “ n”, “ n”, “ n”, “ n”, “ n” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### console.log output showing use of variable n”, “This second example is a sequence of code, two or more lines forms a sequence. This example defines a variable, then outputs the msg to terminal. n”, “- The variable &quot;var msg =&quot; is used to capture the data n”, “- The console.log(msg) outputs to console” ] }, { “cell_type”: “code”, “execution_count”: 23, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello, Emma! n” ] } ], “source”: [ “var msg = &quot;Hello, Emma!&quot;; n”, “console.log(msg);” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### console.log output showing use of a function n”, “This example passes the previously defined variable &quot;msg&quot; to the newly defined &quot;function logIt(output)&quot;. n”, “- There are two steps in the code, the definition of the function and the call to the function. n”, “ - &quot;function logIt(output) {}&quot; and everything between curly braces is the definitions of the function. n”, “ - &quot;logIt(msg)&quot; is the call to the function, this actually activates the function. If you remove this line you will not receive any output to console. n”, “- Since the variable &quot;msg&quot; was defined in previous cell, it is used a parameter when calling the logMessage function.” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello, Emma! n” ] } ], “source”: [ “function logIt(output) { n”, “ console.log(output); n”, “} n”, “logIt(msg);” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Showing reuse of a function n”, “Now that a function is defined, it can be called from any of the subsequent cell in the Jupyter notebook. A function/method, is a process of creating a procedural abstraction. This a programming practice to promote reuse versus coding the same thing over and over. n”, “- First call sends a different string message n”, “- Second call sends a number” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Reuse of logIT n”, “Hello, Students! n”, “2022 n” ] } ], “source”: [ “console.log(&quot;Reuse of logIT&quot;) n”, “logIt(&quot;Hello, Students!&quot;); n”, “logIt(2022)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Dynamic or Loosely typed language (string, number) n”, “JavaScript is a loosely typed language, meaning you don’t have to specify what type of information will be stored in a variable in advance. The variable type is determined at runtime. This is similar to Python and most interpretive languages. Java which is a compiled language is strongly typed, thus you will see string, integer, double, and object in the source code. In JavaScript, the &quot;typeof&quot; keyword returns the type.” ] }, { “cell_type”: “code”, “execution_count”: 30, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Types of variables in JavaScript n”, “string ; AP Computer Science Principles n”, “number ; 16 n”, “object ; [ ‘Emma’, ‘Vivian’, ‘Sarah’, ‘Amay’ ] n” ] } ], “source”: [ “function logItType(output) { n”, “ console.log(typeof output, &quot;;&quot;, output); n”, “} n”, “console.log(&quot;Types of variables in JavaScript&quot;) n”, “logItType(&quot;AP Computer Science Principles&quot;); // String n”, “logItType(32 / 2); // Number n”, “logItType([&quot;Emma&quot;, &quot;Vivian&quot;, &quot;Sarah&quot;, &quot;Amay&quot;]); // Object is generic for this Array, which similar to Python List” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Build a Person Function/Class object and JSON n”, “JavaScript functions have special properties and syntax is shown in many ways. In fact, a Class in JavaScript is a special function. Jupyter Notebooks seems to be more friendly to &quot;function&quot; definitions versus &quot;Class&quot;, thus this lesson uses &quot;function&quot; and &quot;prototype&quot; versus &quot;Class&quot;. n”, “- Definition of function allows for a collection of data, the &quot;function Person&quot; allows programmer to retain name, github id, and class of designation. n”, “- Definition of a prototype allow for the definition of a method associated with the function , the &quot;Person.prototype.toJSON&quot; allows the collection of data to be expressed in a json/string versus JavaScript object. n”, “- Instance of a function, the &quot;var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977)&quot; line makes a variable &quot;teacher&quot; which is an object representation of &quot;function Person&quot;.” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “object ; Person { name: ‘Mr M’, ghID: ‘jm1021’, classOf: 1977, role: ‘Teacher’ } n”, “string ; {&quot;name&quot;:&quot;Mr M&quot;,&quot;ghID&quot;:&quot;jm1021&quot;,&quot;classOf&quot;:1977,&quot;role&quot;:&quot;Teacher&quot;} n” ] } ], “source”: [ “// define a function to hold data for a Person n”, “function Person(name, ghID, classOf) { n”, “ this.name = name; n”, “ this.ghID = ghID; n”, “ this.classOf = classOf; n”, “ this.role = &quot;&quot;; n”, “} n”, “ n”, “// define a setter for role in Person data n”, “Person.prototype.setRole = function(role) { n”, “ this.role = role; n”, “} n”, “ n”, “// define a JSON conversion &quot;method&quot; associated with Person n”, “Person.prototype.toJSON = function() { n”, “ const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; n”, “ const json = JSON.stringify(obj); n”, “ return json; n”, “} n”, “ n”, “// make a new Person and assign to variable teacher n”, “var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); n”, “teacher.setRole(&quot;Teacher&quot;); n”, “ n”, “// output of Object and JSON/string associated with Teacher n”, “logItType(teacher); // object type is easy to work with in JavaScript n”, “logItType(teacher.toJSON()); // json/string is useful when passing data on internet” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### Build a Classroom Array/List of Persons and JSON n”, “Many key elements are shown again. New elements include… n”, “- Building an Array, &quot;var students&quot; is an array of many persons n”, “- Building a Classroom, this show forEach iteration through an array and .push adding to an array. These are key concepts in all programming languages.” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “object ; [ Person { name: ‘Mr M’, ghID: ‘jm1021’, classOf: 1977, role: ‘Teacher’ }, n”, “ Person { n”, “ name: ‘Emma’, n”, “ ghID: ‘e-shen2022’, n”, “ classOf: 2024, n”, “ role: ‘Student’ }, n”, “ Person { n”, “ name: ‘Vivian’, n”, “ ghID: ‘vivianknee’, n”, “ classOf: 2024, n”, “ role: ‘Student’ }, n”, “ Person { n”, “ name: ‘Amay’, n”, “ ghID: ‘amayadvani’, n”, “ classOf: 2024, n”, “ role: ‘Student’ }, n”, “ Person { n”, “ name: ‘Sarah’, n”, “ ghID: ‘sarahliu2006’, n”, “ classOf: 2024, n”, “ role: ‘Student’ } ] n”, “string ; Mr M n”, “string ; {&quot;name&quot;:&quot;Mr M&quot;,&quot;ghID&quot;:&quot;jm1021&quot;,&quot;classOf&quot;:1977,&quot;role&quot;:&quot;Teacher&quot;} n”, “object ; { name: ‘Mr M’, ghID: ‘jm1021’, classOf: 1977, role: ‘Teacher’ } n” ] } ], “source”: [ “// define a student Array of Person(s) n”, “var students = [ n”, “ new Person(&quot;Emma&quot;, &quot;e-shen2022&quot;, 2024), n”, “ new Person(&quot;Vivian&quot;, &quot;vivianknee&quot;, 2024), n”, “ new Person(&quot;Amay&quot;, &quot;amayadvani&quot;, 2024), n”, “ new Person(&quot;Sarah&quot;, &quot;sarahliu2006&quot;, 2024) n”, “]; n”, “ n”, “// define a classroom and build Classroom objects and json n”, “function Classroom(teacher, students){ // 1 teacher, many student n”, “ // start Classroom with Teacher n”, “ teacher.setRole(&quot;Teacher&quot;); n”, “ this.teacher = teacher; n”, “ this.classroom = [teacher]; n”, “ // add each Student to Classroom n”, “ this.students = students; n”, “ this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); n”, “ // build json/string format of Classroom n”, “ this.json = []; n”, “ this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); n”, “} n”, “ n”, “// make a CompSci classroom from formerly defined teacher and students n”, “compsci = new Classroom(teacher, students); n”, “ n”, “// output of Objects and JSON in CompSci classroom n”, “logItType(compsci.classroom); // constructed classroom object n”, “logItType(compsci.classroom[0].name); // abstract 1st objects name n”, “logItType(compsci.json[0]); // show json conversion of 1st object to string n”, “logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “### IJavaScript and Table formatting using toHTML method n”, “This example builds a Classroom method _toHTML which is passed to the IJavaScript interpreter .htmlwhichrendersoutputsimilarlytoarealwebsite. n&quot;,&quot;−JavaScriptinthetoHTMLmethodisbrokenintothreeparts... n&quot;,&quot;−StylepartisbuildingCSSinlineformatting n&quot;,&quot;−BodypartisconstructingtheTableRows(tr),TableHeadings(th),andTableData(td).ThetabledataisobtainedfromaClassroomobject.TheJavaScriptforloopallowstheconstructionofanewrowofdataforeachpersonobjectintheArray. n&quot;,&quot;−ReturnpartcreatestheHTMLfragmentforrendering n&quot;,&quot;−Thelastlineintheexample&lt;mark&gt;.html which renders output similarly to a real website. n&quot;, &quot;- JavaScript in the _toHTML method is broken into three parts... n&quot;, &quot; - Style part is building CSS inline formatting n&quot;, &quot; - Body part is constructing the Table Rows (tr), Table Headings (th), and Table Data (td). The table data is obtained from a Classroom object. The JavaScript for loop allows the construction of a new row of data for each person object in the Array. n&quot;, &quot; - Return part creates the HTML fragment for rendering n&quot;, &quot;- The last line in the example &lt;mark&gt;.htmlwhichrendersoutputsimilarlytoarealwebsite. n&quot;,&quot;−JavaScriptinthet​oHTMLmethodisbrokenintothreeparts... n&quot;,&quot;−StylepartisbuildingCSSinlineformatting n&quot;,&quot;−BodypartisconstructingtheTableRows(tr),TableHeadings(th),andTableData(td).ThetabledataisobtainedfromaClassroomobject.TheJavaScriptforloopallowstheconstructionofanewrowofdataforeachpersonobjectintheArray. n&quot;,&quot;−ReturnpartcreatestheHTMLfragmentforrendering n&quot;,&quot;−Thelastlineintheexample&lt;mark&gt;.html is IJavaScript HTML interpreter&lt;/mark&gt; and by passing the parameter of the _toHTML method it obtains HTML to render” ] }, { “cell_type”: “code”, “execution_count”: 9, “metadata”: {}, “outputs”: [ { “data”: { “text/html”: [ “&lt;div style=&#39;display:inline-block;background:black;border: 2px solid white;box-shadow: 0.8em 0.4em 0.4em blue;&#39;&gt;&lt;table&gt;&lt;tr&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;GitHub ID&lt;/th&gt;&lt;th&gt;Class Of&lt;/th&gt;&lt;th&gt;Role&lt;/th&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;Mr M&lt;/td&gt;&lt;td&gt;jm1021&lt;/td&gt;&lt;td&gt;1977&lt;/td&gt;&lt;td&gt;Teacher&lt;/td&gt;&lt;tr&gt;&lt;tr&gt;&lt;td&gt;Emma&lt;/td&gt;&lt;td&gt;e-shen2022&lt;/td&gt;&lt;td&gt;2024&lt;/td&gt;&lt;td&gt;Student&lt;/td&gt;&lt;tr&gt;&lt;tr&gt;&lt;td&gt;Vivian&lt;/td&gt;&lt;td&gt;vivianknee&lt;/td&gt;&lt;td&gt;2024&lt;/td&gt;&lt;td&gt;Student&lt;/td&gt;&lt;tr&gt;&lt;tr&gt;&lt;td&gt;Amay&lt;/td&gt;&lt;td&gt;amayadvani&lt;/td&gt;&lt;td&gt;2024&lt;/td&gt;&lt;td&gt;Student&lt;/td&gt;&lt;tr&gt;&lt;tr&gt;&lt;td&gt;Sarah&lt;/td&gt;&lt;td&gt;sarahliu2006&lt;/td&gt;&lt;td&gt;2024&lt;/td&gt;&lt;td&gt;Student&lt;/td&gt;&lt;tr&gt;&lt;/table&gt;&lt;/div&gt;” ] }, “execution_count”: 9, “metadata”: {}, “output_type”: “execute_result” } ], “source”: [ “// define an HTML conversion &quot;method&quot; associated with Classroom n”, “Classroom.prototype._toHtml = function() { n”, “ // HTML Style is build using inline structure n”, “ var style = ( n”, “ &quot;display:inline-block;&quot; + n”, “ &quot;background:black;&quot; + n”, “ &quot;border: 2px solid white;&quot; + n”, “ &quot;box-shadow: 0.8em 0.4em 0.4em blue;&quot; n”, “ ); n”, “ n”, “ // HTML Body of Table is build as a series of concatenations (+=) n”, “ var body = &quot;&quot;; n”, “ // Heading for Array Columns n”, “ body += &quot;&lt;tr&gt;&quot;; n”, “ body += &quot;&lt;th&gt; &quot; + &quot;Name &quot; + &quot;&lt;/th&gt;&quot;; n”, “ body += &quot;&lt;th&gt; &quot; + &quot;GitHub ID &quot; + &quot;&lt;/th&gt;&quot;; n”, “ body += &quot;&lt;th&gt; &quot; + &quot;Class Of &quot; + &quot;&lt;/th&gt;&quot;; n”, “ body += &quot;&lt;th&gt; &quot; + &quot;Role &quot; + &quot;&lt;/th&gt;&quot;; n”, “ body += &quot;&lt;/tr&gt;&quot;; n”, “ // Data of Array, iterate through each row of compsci.classroom n”, “ for (var row of compsci.classroom) { n”, “ // tr for each row, a new line n”, “ body += &quot;&lt;tr&gt;&quot;; n”, “ // td for each column of data n”, “ body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; n”, “ body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; n”, “ body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; n”, “ body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; n”, “ // tr to end line n”, “ body += &quot;&lt;tr&gt;&quot;; n”, “ } n”, “ n”, “ // Build and HTML fragment of div, table, table body n”, “ return ( n”, “ &quot;&lt;div style=&#39; &quot; + style + &quot;&#39;&gt;&quot; + n”, “ &quot;&lt;table&gt;&quot; + n”, “ body + n”, “ &quot;&lt;/table&gt;&quot; + n”, “ &quot;&lt;/div&gt;&quot; n”, “ ); n”, “ n”, “ }; n”, “ n”, “ // IJavaScript HTML processor receive parameter of defined HTML fragment n”, “ $$.html(compsci._toHtml());” ] } ], “metadata”: { “kernelspec”: { “display_name”: “JavaScript (Node.js)”, “language”: “javascript”, “name”: “javascript” }, “language_info”: { “file_extension”: “.js”, “mimetype”: “application/javascript”, “name”: “javascript”, “version”: “6.11.2” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://ethan2806.github.io/apcsp.github.io/2022/09/25/Java-Script.ipynb",
            "relUrl": "/2022/09/25/Java-Script.ipynb",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "App Lab Notes",
            "content": "Notes . My test will be on Actors in Movies | The code On Event will be used for most of everything that we do | We will be using the term score for the questions we get right, and the ones we get wrong | . What my questions will be: . Who plays Captain America? | Who plays Black Panther? | Who plays Iron Man? | Who plays Stefan Salvatore in the Vampire Diaries? | Who plays Captain Cold in the flash? | Who plays Elijah Michaelson in the Originals? | https://studio.code.org/projects/applab/VUdAy1WNGj2Mapn8vVHfg9D6zWkwYdQwMounzkZ1Wsk/edit | . .",
            "url": "https://ethan2806.github.io/apcsp.github.io/coding/2022/09/11/Introduction-To-Programming.html",
            "relUrl": "/coding/2022/09/11/Introduction-To-Programming.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lists and Dictionaries",
            "content": "print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) name = &quot;John Doe&quot; print(&quot;name&quot;, name, type(name)) print() # variable of type integer print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) age = 18 print(&quot;age&quot;, age, type(age)) print() # variable of type float print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) score = 90.0 print(&quot;score&quot;, score, type(score)) print() # variable of type list (many values in one variable) print(&quot;What is variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection?&quot;) print(&quot;What is different about the list output?&quot;) langs = [&quot;Python&quot;, &quot;JavaScript&quot;, &quot;Java&quot;] print(&quot;langs&quot;, langs, type(langs), &quot;length&quot;, len(langs)) print(&quot;- langs[0]&quot;, langs[0], type(langs[0])) print() # variable of type dictionary (a group of keys and values) print(&quot;What is the variable name/key?&quot;, &quot;value?&quot;, &quot;type?&quot;, &quot;primitive or collection, why?&quot;) print(&quot;What is different about the dictionary output?&quot;) person = { &quot;name&quot;: name, &quot;age&quot;: age, &quot;score&quot;: score, &quot;langs&quot;: langs } print(&quot;person&quot;, person, type(person), &quot;length&quot;, len(person)) print(&#39;- person[&quot;name&quot;]&#39;, person[&quot;name&quot;], type(person[&quot;name&quot;])) . What is the variable name/key? value? type? primitive or collection, why? name John Doe &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? age 18 &lt;class &#39;int&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? score 90.0 &lt;class &#39;float&#39;&gt; What is variable name/key? value? type? primitive or collection? What is different about the list output? langs [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;] &lt;class &#39;list&#39;&gt; length 3 - langs[0] Python &lt;class &#39;str&#39;&gt; What is the variable name/key? value? type? primitive or collection, why? What is different about the dictionary output? person {&#39;name&#39;: &#39;John Doe&#39;, &#39;age&#39;: 18, &#39;score&#39;: 90.0, &#39;langs&#39;: [&#39;Python&#39;, &#39;JavaScript&#39;, &#39;Java&#39;]} &lt;class &#39;dict&#39;&gt; length 4 - person[&#34;name&#34;] John Doe &lt;class &#39;str&#39;&gt; . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;John&quot;, &quot;LastName&quot;: &quot;Mortensen&quot;, &quot;DOB&quot;: &quot;October 21&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;jmortensen@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2015-Fusion&quot;, &quot;2011-Ranger&quot;, &quot;2003-Excursion&quot;, &quot;1997-F350&quot;, &quot;1969-Cadillac&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Ethan&quot;, &quot;LastName&quot;: &quot;Truong&quot;, &quot;DOB&quot;: &quot;July 28&quot;, &quot;Residence&quot;: &quot;4s Ranch&quot;, &quot;Email&quot;: &quot;truong.ethan@yahoo.com&quot;, &quot;Owns_Cars&quot;: [&quot;BMW&quot;] }) # Print the data structure # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Liav&quot;, &quot;LastName&quot;: &quot;Bar&quot;, &quot;DOB&quot;: &quot;August 9&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;liavbar5@gmail.com&quot;, &quot;Owns_Cars&quot;: [&quot;2020-Camry&quot;, &quot;2017-Sorento&quot;] }) # Append to List a 2nd Dictionary of key/values InfoDb.append({ &quot;FirstName&quot;: &quot;Re&#39;em&quot;, &quot;LastName&quot;: &quot;Ben-Ishai&quot;, &quot;DOB&quot;: &quot;May 11&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;ReemB@powayusd.com&quot;, &quot;Owns_Cars&quot;: [&quot;2021-Kona&quot;] }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;John&#39;, &#39;LastName&#39;: &#39;Mortensen&#39;, &#39;DOB&#39;: &#39;October 21&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;jmortensen@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2015-Fusion&#39;, &#39;2011-Ranger&#39;, &#39;2003-Excursion&#39;, &#39;1997-F350&#39;, &#39;1969-Cadillac&#39;]}, {&#39;FirstName&#39;: &#39;Ethan&#39;, &#39;LastName&#39;: &#39;Truong&#39;, &#39;DOB&#39;: &#39;July 28&#39;, &#39;Residence&#39;: &#39;4s Ranch&#39;, &#39;Email&#39;: &#39;truong.ethan@yahoo.com&#39;, &#39;Owns_Cars&#39;: [&#39;BMW&#39;]}, {&#39;FirstName&#39;: &#39;Liav&#39;, &#39;LastName&#39;: &#39;Bar&#39;, &#39;DOB&#39;: &#39;August 9&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;liavbar5@gmail.com&#39;, &#39;Owns_Cars&#39;: [&#39;2020-Camry&#39;, &#39;2017-Sorento&#39;]}, {&#39;FirstName&#39;: &#34;Re&#39;em&#34;, &#39;LastName&#39;: &#39;Ben-Ishai&#39;, &#39;DOB&#39;: &#39;May 11&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;ReemB@powayusd.com&#39;, &#39;Owns_Cars&#39;: [&#39;2021-Kona&#39;]}] . Using Index in For Loop . list = [&quot;Mercedes&quot;,&quot;Toyota&quot;,&quot;Tesla&quot;,&quot;Honda&quot;,&quot;Hyundai&quot;,&quot;Bugatti&quot;] for i in list: print(i) . Mercedes Toyota Tesla Honda Hyundai Bugatti . Outputing In Reverse Order . list = [&quot;Mercedes&quot;,&quot;Toyota&quot;,&quot;Tesla&quot;,&quot;Honda&quot;,&quot;Hyundai&quot;,&quot;Bugatti&quot;] for i in list: print(i[::-1]) print(list[::-1]) . sedecreM [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] atoyoT [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] alseT [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] adnoH [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] iadnuyH [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] ittaguB [&#39;Bugatti&#39;, &#39;Hyundai&#39;, &#39;Honda&#39;, &#39;Tesla&#39;, &#39;Toyota&#39;, &#39;Mercedes&#39;] . Other Methods Performed By Lists . QuizThat Stores In a List of Dictionaries . def question_with_response(prompt): print(&quot;Question: &quot; + prompt) word = &quot; &quot; questions = 4 # number of questions correct = 0 questions_answers = [{&quot;What command is used to include other functions that were previously developed?&quot; : &quot;import&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot; : &quot;if&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; : &quot;expression&quot;, &quot;Variables for the values the function needs. Is passed as an argument when the function is called&quot; : &quot;parameters&quot;}] # dictionary # questions_answers.append = ({&quot;What command is used to include other functions that were previously developed?&quot; : &quot;import&quot;, # &quot;What command is used to evaluate correct or incorrect response in this example?&quot; : &quot;if&quot;, # &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot; : &quot;expression&quot;, # &quot;Variables for the values the function needs. Is passed as an argument when the function is called&quot; : &quot;parameters&quot;}) # dictionary for i in questions_answers: for question, answer in i.items(): question_with_response(question) # printing the questions word = input(&quot;Answer: &quot;) # variable that connects to the user&#39;s input if word == answer: # if the answer provided is correct print(&quot;You got it right!!&quot;) correct += 1 else: # if the answer provided is wrong print(&quot;Your answer was wrong&quot;) print(str(correct) + &quot;/&quot; + str(questions)) # correct/len(questions_answers) . Question: What command is used to include other functions that were previously developed? You got it right!! Question: What command is used to evaluate correct or incorrect response in this example? You got it right!! Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? You got it right!! Question: Variables for the values the function needs. Is passed as an argument when the function is called You got it right!! 4/4 . New Dictionary Data Set .",
            "url": "https://ethan2806.github.io/apcsp.github.io/python/2022/09/02/infoDB.html",
            "relUrl": "/python/2022/09/02/infoDB.html",
            "date": " • Sep 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "BashKernel",
            "content": "Python Versions . python --version python2 --version . Python 3.9.12 Python 2.7.18 . Anaconda Files . conda list . # packages in environment at /home/Ethan/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.8.0 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . Anaconda Versions . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . Jupyter Version + Files . jupyter --version jupyter kernelspec list . Python Folder . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /home/Ethan/.local/share/jupyter/kernels/python3 .",
            "url": "https://ethan2806.github.io/apcsp.github.io/2022/08/29/Tools-Check.html",
            "relUrl": "/2022/08/29/Tools-Check.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Title",
            "content": ". toc: true layout: post description: Ethan&#39;s Python Quiz questions categories: [markdown] . Python Quiz . Python Quiz . A display of the Python Quiz . import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 4 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;What does the NBA stand for?&quot;) if rsp == &quot;National Basketball Association&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What team has the theme color of Purple and Yellow?&quot;) if rsp == &quot;Lakers&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;Who is the best player on the Lakers?&quot;) if rsp == &quot;Lebron James&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the line on the side of the court called?&#39;&quot;) if rsp == &quot;Sideline&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What do you shoot when you get fouled?&#39;&quot;) if rsp == &quot;Free Throws&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, Ethan2806 running c: Users Ethan2806 anaconda3 2 python.exe You will be asked 4 questions. Question: Are you ready to take a test? Question: What team has the theme color of Purple and Yellow? Lakers is correct! Question: Who is the best player on the Lakers? Lebron James is correct! Question: What is the line on the side of the court called? Sideline is correct! Question: What do you shoot when you get fouled? Free Throws is correct! Ethan2806 you scored 4/4 .",
            "url": "https://ethan2806.github.io/apcsp.github.io/2022/08/28/Ethan's-Quiz.html",
            "relUrl": "/2022/08/28/Ethan's-Quiz.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Ethan's Jupyter Notebook Post",
            "content": "My Favorite Vacation Spot . My favorite vacation was when I went to Cancun, Mexico. In Cancun, I did have one of the scariest experiences of my life when I fell off a jetski in the middle of the beach because there was a huge wave. Besides that, everything else was fun. The beach was very fun with huge waves. The one downside to Cancun is that the air is very humid. Other than that, we did things like parasailing, jet skiing, and swimming and it was super fun. . .",
            "url": "https://ethan2806.github.io/apcsp.github.io/jupyter/2022/08/26/JupyterNotebook.html",
            "relUrl": "/jupyter/2022/08/26/JupyterNotebook.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ethan2806.github.io/apcsp.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me/Goals",
          "content": "This website is powered by fastpages 1. . My Goals in APCSP . I took this class because I plan on majoring in computer science in college. Ever since I was a little kid I was into computers and video games. I realized that I was more advanced than most people in computers and how to navigate. I want to learn about coding and python coding so I can take these skills further into college classes and my major. . My background life . My name is Ethan Truong and I am 16 years old born on July 28th, 2006. I live at home with my mom, dad, and my brother. My brother is a freshman here at this school. I grew up in the area of Linda Vista with my grandparents and eventually moved out to 4s Ranch. I love to play basketball and video games on my freetime. Video games I play include valorant and warzone. Thanks for reading! . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://ethan2806.github.io/apcsp.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ethan2806.github.io/apcsp.github.io/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}